name: Terraform Module Version Checker

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *'  # Todos los d√≠as a las 7AM Argentina

permissions:
  contents: read
  issues: write

jobs:

  # ===============================================
  # JOB 1: Chequeador de Versiones
  # (1) Parseo el modules.plain
  # (2) Consulto la Registry y comparo versiones
  # (3) Guardo comparaciones en version_report.md
  # (4) Los desactualizados van a module_issues.txt
  # (5) Subo module_issues.txt como Artifact
  # ===============================================

  check_versions:
    runs-on: ubuntu-latest
    outputs:
      outdated: ${{ steps.check.outputs.outdated }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: üöÄ Run version checker
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INPUT_FILE="example/complete/modules.plain"
          OUTPUT_FILE="version_report.md"
          TMP_FILE=".modules_cleaned.tmp"
          ISSUE_FILE="module_issues.txt"

          # ========== (1) PARSEO el modules.plain desde `terraform modules` ==========
          echo "üîÑ Generando listado de m√≥dulos desde 'terraform modules'..."
          terraform init -input=false -backend=false > /dev/null
          terraform modules > "$INPUT_FILE"

          if [[ $? -ne 0 ]]; then
            echo "‚ùå Error al generar $INPUT_FILE. Abortando."
            exit 1
          fi

          # ========== (1) Extraigo campos de inter√©s: module_name, path, version ==========
          sed -nE 's/.*"([^"]+)"\[([^]]+)\][[:space:]]+([0-9]+\.[0-9]+\.[0-9]+).*$/\1|\2|\3/p' "$INPUT_FILE" > "$TMP_FILE"

          # ========== INICIO archivo version_report.md ==========
          echo "# üì¶ Terraform Module Version Report" > "$OUTPUT_FILE"
          echo "_Generated on $(date)_" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          touch "$ISSUE_FILE"

          # ========== (2) CONSULTA de versiones y COMPARACI√ìN ==========
          while IFS="|" read -r MODULE_NAME MODULE_PATH USED_VERSION; do
            MODULE_NAME=$(echo "$MODULE_NAME" | sed 's/^module\.//; s/ *$//')
            MODULE_PATH=$(echo "$MODULE_PATH" | xargs)
            USED_VERSION=$(echo "$USED_VERSION" | xargs | sed 's/^[^0-9]*//')

            if [[ -z "$MODULE_PATH" || "$MODULE_PATH" != registry.terraform.io/* ]]; then
              continue
            fi

            # Extraigo namespace, name y provider sin eliminar subm√≥dulos
            MODULE_INFO=$(echo "$MODULE_PATH" | sed 's|^registry\.terraform\.io/||' | cut -d/ -f1-3)
            IFS='/' read -r namespace name provider <<< "$MODULE_INFO"

            if [[ -z "$namespace" || -z "$name" || -z "$provider" ]]; then
              echo "‚ö†Ô∏è Entrada malformada: $MODULE_PATH" | tee -a "$OUTPUT_FILE"
              continue
            fi

            API_URL="https://registry.terraform.io/v1/modules/${namespace}/${name}/${provider}/versions"
            RESPONSE=$(curl -s "$API_URL")

            if [[ -z "$RESPONSE" || "$RESPONSE" == "null" ]]; then
              echo "‚ö†Ô∏è No se pudo obtener la √∫ltima versi√≥n de \`${MODULE_PATH}\` (error API)" | tee -a "$OUTPUT_FILE"
              continue
            fi

            LATEST_VERSION=$(echo "$RESPONSE" | jq -r '.modules[0].versions | map(.version) | sort | last')

            if [[ -z "$LATEST_VERSION" || "$LATEST_VERSION" == "null" ]]; then
              echo "‚ö†Ô∏è No se pudo determinar la √∫ltima versi√≥n de \`${MODULE_PATH}\`" | tee -a "$OUTPUT_FILE"
              continue
            fi

            # ========== (3) Escribo resultado en version_report.md ==========
            if [[ "$USED_VERSION" == "$LATEST_VERSION" ]]; then
              echo "‚úÖ \`${MODULE_PATH}\` est√° actualizado (**$USED_VERSION**)" | tee -a "$OUTPUT_FILE"
            else
              echo "‚ùå \`${MODULE_PATH}\` est√° desactualizado (usado: **$USED_VERSION**, √∫ltimo: **$LATEST_VERSION**)" | tee -a "$OUTPUT_FILE"
              
              # ========== (4) Guardo m√≥dulo desactualizado en module_issues.txt ==========
              echo "${MODULE_NAME}|${namespace}/${name}/${provider}|${USED_VERSION}|${LATEST_VERSION}" >> "$ISSUE_FILE"
            fi
          done < "$TMP_FILE"

          rm -f "$TMP_FILE"

          # ========== Output para activar el segundo job ==========
          if [[ -s "$ISSUE_FILE" ]]; then
            echo "outdated=true" >> "$GITHUB_OUTPUT"
          else
            echo "outdated=false" >> "$GITHUB_OUTPUT"
          fi

      
      - name: üìù Listar archivos antes de subir artifact
        run: ls -lh . || true

      - name: üìÑ Mostrar contenido de module_issues.txt
        run: cat module_issues.txt || echo "Archivo vac√≠o o no existe"


      # ========== (5) Subo los archivos generados como artifacts ========== 
             
      - name: üì¶ Guardar artifacts
        if: ${{ steps.check.outputs.outdated == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: module-version-check
          path: module_issues.txt 

  # ======================================================
  # JOB 2: Generador de Issues
  # (1) Lee module_issues.txt generado por el job anterior
  # (2) Por cada m√≥dulo busca si ya hay un issue abierto
  # (3) Si no existe -> lo crea
  # (4) Si existe pero est√° desactualizado -> lo actualiza
  # ======================================================

  manage_issues:
    needs: check_versions
    if: needs.check_versions.outputs.outdated == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Descargar artifacts del job anterior
        uses: actions/download-artifact@v4
        with:
          name: module-version-check
          path: module_issues.txt

      #- name: üì• Checkout repository
      #  uses: actions/checkout@v4

      - name: üìù Listar archivos subidos al artifact
        run: ls -lah . || true

        # ========== Preparo el entorno con la CLI de GitHub ==========
      - name: üõ†Ô∏è Install GitHub CLI (gh)
        run: |
          type -p gh || (
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
            sudo apt update && sudo apt install gh -y
          )
          gh --version

      - name: üêõ Crear o actualizar issues para m√≥dulos desactualizados
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ========== (1) Itero por cada m√≥dulo desactualizado ==========
          while IFS="|" read -r pattern module used latest; do
            title="Upgrade(${pattern}): ${module} (${used} > ${latest})"

            # ========== (2) Verifico si ya hay un issue abierto ==========
            echo "üîç Buscando issue existente para $module"
            issue_data=$(gh issue list --state open --search "$pattern" --json title,number --jq \
              '.[] | select(.title | contains("'"$pattern"'"))')

            # ========== (3) Si no existe, creo el issue ==========
            if [[ -z "$issue_data" ]]; then              
              echo "üåü Creando issue: $title"
              gh issue create \
                --title "$title" \
                --body "El m√≥dulo \`${module}\` est√° desactualizado.\n\n- Pattern: \`${pattern}\`\n- Usado: \`${used}\`\n- √öltima versi√≥n: \`${latest}\`" \
                --label terraform
            else
              number=$(echo "$issue_data" | jq -r '.number')
              old_title=$(echo "$issue_data" | jq -r '.title')

              # ========== (4) Si existe pero est√° desactualizado, lo actualizo ==========
              if [[ "$old_title" != *"$latest"* ]]; then
                echo "‚úèÔ∏è Actualizando issue #$number con nueva versi√≥n"
                gh issue edit "$number" \
                  --title "$title" \
                  --body "El m√≥dulo \`${module}\` est√° desactualizado.\n\n- Pattern: \`${pattern}\`\n- Usado: \`${used}\`\n- √öltima versi√≥n: \`${latest}\`"
              else
                echo "‚úÖ Issue ya existente y actualizado para $pattern"
              fi
            fi
          done < ./module_issues.txt
