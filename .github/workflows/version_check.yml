name: Terraform Module Version Checker

on:
  schedule:
    #- cron: '*/5 * * * *'
    #- cron: '0 10 * * *'  # Todos los días a las 10 AM UTC (~7 AM Argentina)
  workflow_dispatch:     # Permite ejecutarlo manualmente
  #push:
  #  branches:
  #    - nombre-branch

jobs:
  check_versions:
    runs-on: ubuntu-latest
    permissions:  # validar si esto permisos son necesario o existen  
      issues: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      #- name: 🛠️ Install dependencies (jq, curl)  --> necesario ? probar
      #  run: sudo apt-get update && sudo apt-get install -y jq curl unzip gnupg lsb-release

      - name: 🛠️ Install Terraform (stable version)
        if: false
        run: |
          TERRAFORM_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version)
          curl -s -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform -version

      - name: 🛠️ Install Terraform (stable version)
        uses: hashicorp/setup-terraform@v3

        ## deberia estar aca el codigo. no en un archivo aparte.  No deberia chequear si un archivo esta vacio. el script deberia sacar una variable para que eso indique si hay modulos outdated. 
      - name: 🚀 Run version checker script
        run: bash .github/scripts/check_versions.sh

        ## este paso esta de mas fixeando lo primero. no deberia hacer falta esto.
      - name: ✅ Check if modules are outdated
        id: check
        run: |
          if [[ -s .module_issues.txt ]]; then
            echo "outdated=true" >> "$GITHUB_OUTPUT"
          else
            echo "outdated=false" >> "$GITHUB_OUTPUT"
          fi

      # NO deberia hacer falta instalacion de gh.
      - name: 🛠️ Install GitHub CLI (gh)
        if: steps.check.outputs.outdated == 'true'
        run: |
          type -p gh || (
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
            sudo apt update && sudo apt install gh -y
          )
          gh --version

      - name: 🐛 Create or update issues for outdated modules
        if: steps.check.outputs.outdated == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # no deberia hacer falta usar github-token: ${{ secrets.GITHUB_TOKEN }} y setear permisos en workflow
        run: |
          while IFS="|" read -r module used latest; do
            title="${module} module not on date (${used} > ${latest})"
            
            echo "🔍 Searching for existing issue for $module"
            issue_data=$(gh issue list --state open --search "$module" --json title,number --jq \
              '.[] | select(.title | contains("'"$module"'"))')

            if [[ -z "$issue_data" ]]; then
              echo "🆕 Creating issue: $title"
              gh issue create \
                --title "$title" \
                --body "The module \`$module\` is outdated.\n\n- Used: \`$used\`\n- Latest: \`$latest\`" \
                --label terraform
            else
              number=$(echo "$issue_data" | jq -r '.number')
              old_title=$(echo "$issue_data" | jq -r '.title')

              if [[ "$old_title" != *"$latest"* ]]; then
                echo "✏️ Updating issue #$number with new version"
                gh issue edit "$number" \
                  --title "$title" \
                  --body "The module \`$module\` is outdated.\n\n- Used: \`$used\`\n- Latest: \`$latest\`"
              else
                echo "✅ Issue already exists and is up to date for $module"
              fi
            fi
          done < .module_issues.txt
